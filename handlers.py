from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.utils.callback_data import CallbackData
from game import GameState
from data import countries

# —Ç–∏–ø user_id -> GameState
_games = {}


async def cmd_start(message: types.Message):
    await message.answer("üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, /travel –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è (10 —Å—Ç—Ä–∞–Ω), /stats ‚Äî —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–∫–∏, /help ‚Äî –ø–æ–º–æ—â—å.")


async def cmd_help(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî —Å—Ç–∞—Ä—Ç\n/play ‚Äî –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å\n/travel ‚Äî –Ω–∞—á–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ\n/stats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏ –∏ –∂–∏–∑–Ω–∏\n/stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É")


async def cmd_play(message: types.Message):
    # –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ GameState)
    country = choice(list(countries.keys()))
    capital = countries[country]["capital"]
    # prepare options
    other_caps = [countries[c]["capital"] for c in sample(list(countries.keys()), 3)]
    options = list(set(other_caps + [capital]))
    from aiogram.types import ReplyKeyboardMarkup
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in options:
        keyboard.add(opt)
    # store temporary state —Ç—É—Ç
    _games[message.from_user.id] = GameState(message.from_user.id, countries)
    gs = _games[message.from_user.id]
    gs.current_country = country
    gs.current_capital = capital
    gs.in_travel = False
    await message.answer(f"‚úàÔ∏è –í—ã –ø—Ä–∏–ª–µ—Ç–µ–ª–∏ –≤ {country}!\n–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞?", reply_markup=keyboard)


async def cmd_travel(message: types.Message):
    user_id = message.from_user.id
    gs = GameState(user_id, countries)
    gs.start_travel()
    _games[user_id] = gs
    country, capital = gs.next_question()
    options = [countries[c]["capital"] for c in sample(list(countries.keys()), 3)] + [capital]
    options = list(set(options))
    from aiogram.types import ReplyKeyboardMarkup
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in options:
        keyboard.add(opt)
    await message.answer(f"üß≥ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –°—Ç—Ä–∞–Ω–∞ 1: {country}\n–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞?\n(–£ –≤–∞—Å {gs.lives} –∂–∏–∑–Ω–µ–π)", reply_markup=keyboard)


async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    gs = _games.get(user_id)
    if not gs:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ /travel —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return
    await message.answer(f"üìä –í–∞—à–∏ –æ—á–∫–∏: {gs.score}\n–ñ–∏–∑–Ω–∏: {gs.lives}\n–ü—Ä–æ–π–¥–µ–Ω–æ: {gs.progress}/{len(gs.route) if gs.route else 0}")


async def cmd_stop(message: types.Message):
    user_id = message.from_user.id
    gs = _games.pop(user_id, None)
    if not gs:
        await message.answer("–ê–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await message.answer(f"–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –í–∞—à –∏—Ç–æ–≥: {gs.score} –æ—á–∫–æ–≤.")


async def handle_message(message: types.Message):
    user_id = message.from_user.id
    gs = _games.get(user_id)
    text = message.text.strip()
    if not gs or (not gs.current_capital):
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ /play –∏–ª–∏ /travel —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.")
        return

    # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ä–µ–∂–∏–º–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º GameState.answer
    correct = text.lower() == (gs.current_capital or "").lower()
    country = gs.current_country
    fact = countries.get(country, {}).get("fact", "")

    if gs.in_travel:
        correct, finished = gs.answer(text)
        if correct:
            reply = f"‚úÖ –í–µ—Ä–Ω–æ! +10 –æ—á–∫–æ–≤.\n‚ÑπÔ∏è –§–∞–∫—Ç –æ {country}: {fact}\n–û—á–∫–∏: {gs.score} | –ñ–∏–∑–Ω–∏: {gs.lives}"
        else:
            reply = f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {gs.current_capital}.\n‚ÑπÔ∏è –§–∞–∫—Ç –æ {country}: {fact}\n–û—á–∫–∏: {gs.score} | –ñ–∏–∑–Ω–∏: {gs.lives}"
        if finished:
            # –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–ª–∏–±–æ –∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏, –ª–∏–±–æ –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–π–¥–µ–Ω)
            _games.pop(user_id, None)
            reply += f"\n\nüèÅ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ò—Ç–æ–≥: {gs.score} –æ—á–∫–æ–≤."
            from aiogram.types import ReplyKeyboardRemove
            await message.answer(reply, reply_markup=ReplyKeyboardRemove())
        else:
            # —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            country_next, capital_next = gs.next_question()
            options = [countries[c]["capital"] for c in sample(list(countries.keys()), 3)] + [capital_next]
            options = list(set(options))
            from aiogram.types import ReplyKeyboardMarkup
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            for opt in options:
                keyboard.add(opt)
            await message.answer(reply + f"\n\n–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∞: {country_next}. –ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞?", reply_markup=keyboard)
    else:
        # —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        if correct:
            await message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! +10 –æ—á–∫–æ–≤.\n‚ÑπÔ∏è –§–∞–∫—Ç: {fact}")
        else:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {gs.current_capital}.\n‚ÑπÔ∏è –§–∞–∫—Ç: {fact}")
        # —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π GameState
        _games.pop(user_id, None)